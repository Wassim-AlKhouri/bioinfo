df <- read.table("data/original/GenomeAnnotations (paper)/GenomeAnnotations/MouseAnnotation.txt",
header = TRUE,
sep="")
gc <- df$GC_PROPORTION
gc <- na.omit(gc)
var(gc)
gc
data <- read.table('data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
sep = "\t",header = TRUE )
counts <- data$snv_count
d_obs   <- diff(counts)
?diff()
?diff
data <- read.table('data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
sep = "\t",header = TRUE )
counts <- data$snv_count
d_obs   <- diff(counts)
var_obs <- var(d_obs)
var_obs
data <- read.table('data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv',
sep = "\t",header = TRUE )
counts <- data$GC_prop
hist(counts,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (Arabidopsis) ",
xlab   = "GC count")
d_obs   <- diff(counts)
var_obs <- var(d_obs)
var_obs
for(i in 1:5){
set.seed(123+i)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
ft <- var.test(d_obs, d_rand)
print(ft)
}
for(i in 1:5){
set.seed(123+i)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
var_rand
ft <- var.test(d_obs, d_rand)
print(ft)
}
for(i in 1:5){
set.seed(123+i)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
print(var_rand)
ft <- var.test(d_obs, d_rand)
print(ft)
}
data <- read.table('data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
sep = "\t",header = TRUE )
counts <- data$snv_count
counts_log <- log1p(counts)
hist(counts_log,
breaks = 20,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count ",
xlab   = "log SNV count")
d_obs   <- diff(counts)
var_obs <- var(d_obs)
var_obs
for(i in 1:5){
set.seed(123+i)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
ft <- var.test(d_obs, d_rand)
print(ft)
}
for(i in 1:5){
set.seed(123+i)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
ft <- var.test(d_obs, d_rand)
print(var_rand)
print(ft)
}
hist(d_obs,
breaks = 20,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in SNV-count ",
xlab   = "differences in SNV-count")
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in SNV-count ",
xlab   = "differences in SNV-count")
hist(log1p(d_obs),
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in SNV-count ",
xlab   = "differences in SNV-count")
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in SNV-count ",
xlab   = "differences in SNV-count")
data <- read.table('data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv',
sep = "\t",header = TRUE )
counts <- data$GC_prop
d_obs   <- diff(counts)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
for(i in 1:5){
set.seed(123+i)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
print(var_rand)
ft <- var.test(d_obs, d_rand)
print(ft)
}
set.seed(123)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
print(var_rand)
ft <- var.test(d_obs, d_rand)
print(ft)
hist(d_rand,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.6),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.6),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.6),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.6),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.3),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.9),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.1),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.2),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.2),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 100,
freq   = FALSE,
col    = rgb(1,1,1,0.4),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_obs,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 50,
freq   = FALSE,
col    = rgb(1,1,1,0.4),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(d_rand,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_rand,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
data <- read.table('data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
sep = "\t",header = TRUE )
counts <- data$snv_count
counts_log <- log1p(counts)
hist(counts_log,
breaks = 20,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count ",
xlab   = "log SNV count")
d_obs   <- diff(counts)
hist(d_obs,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average SNV-count ",
xlab   = "differences in SNV-count frequency ")
var_obs <- var(d_obs)
var_obs
set.seed(123)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
ft <- var.test(d_obs, d_rand)
print(var_rand)
print(ft)
hist(d_rand,
breaks = 50,
freq   = FALSE,
col    = rgb(1,1,1,0.4),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
hist(counts,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (Arabidopsis) ",
xlab   = "GC count")
d_obs   <- diff(counts)
var_obs <- var(d_obs)
var_obs
hist(d_obs,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
data <- read.table('data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv',
sep = "\t",header = TRUE )
counts <- data$GC_prop
hist(counts,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (Arabidopsis) ",
xlab   = "GC count")
d_obs   <- diff(counts)
var_obs <- var(d_obs)
var_obs
hist(d_obs,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_obs,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
hist(d_obs,
breaks = 50,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Pairwise differences in average GC proportion  ",
xlab   = "differences in GC proportion ")
set.seed(123)
d_rand   <- diff(sample(counts))
var_rand <- var(d_rand)
print(var_rand)
ft <- var.test(d_obs, d_rand)
print(ft)
hist(d_rand,
breaks = 50,
freq   = FALSE,
col    = rgb(1,1,1,0.4),   # semi-transparent white
border = "white",          # white outline
add    = TRUE)
library(oHMMed)
library(ggmcmc)                           # plotting helpers
## ---------------------------------------------------------------------------
## 1.  LOAD THE WINDOW-LEVEL FEATURES YOU CREATED EARLIER
## ---------------------------------------------------------------------------
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
View(snv_df)
counts_raw <- as.integer(snv_df$snv_count)        # make sure they are *integers*
counts_raw
counts_raw <- pmax(counts_raw, 1L)           # avoid zero counts (log(0) = -Inf)
?pmax
## ---------------------------------------------------------------------------
## 1.  LOAD THE WINDOW-LEVEL FEATURES YOU CREATED EARLIER
## ---------------------------------------------------------------------------
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
counts_raw <- as.integer(snv_df$snv_count)        # make sure they are *integers*
counts_raw <- pmax(counts_raw, 1L)           # avoid zero counts (log(0) = -Inf)
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
View(gc_df)
View(snv_df)
# ---- NEW LINE ----  unify column header with SNV table
if ("chr" %in% names(gc_df)) names(gc_df)[names(gc_df) == "chr"] <- "seqnames"
gc_prop <- gc_df$GC_prop
gc_prop
View(snv_df)
View(gc_df)
## ---------------------------------------------------------------------------
## 1.  LOAD THE WINDOW-LEVEL FEATURES YOU CREATED EARLIER
## ---------------------------------------------------------------------------
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
counts_raw <- as.integer(snv_df$snv_count)        # make sure they are *integers*
counts_raw <- pmax(counts_raw, 1L)           # avoid zero counts (log(0) = -Inf)
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
View(gc_df)
# ---- NEW LINE ----  unify column header with SNV table
if ("chr" %in% names(gc_df)) names(gc_df)[names(gc_df) == "chr"] <- "seqnames"
View(gc_df)
View(gc_df)
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
View(gc_df)
# ---- NEW LINE ----  unify column header with SNV table
if ("chr" %in% names(gc_df)) names(gc_df)[names(gc_df) == "chr"] <- "seqnames"
View(snv_df)
gc_prop <- gc_df$GC_prop
## ---------------------------------------------------------------------------
## 2.  CHOOSE NUMBER OF HIDDEN STATES  +  BUILD REASONABLE PRIORS
## ---------------------------------------------------------------------------
K_counts <- 4                     # try 4 for mutation-rate landscape
K_gc     <- 3                     # try 3 for GC (low-mid-high)
### 2a. Priors for the **gamma-Poisson** model  (counts)
prior_T_counts   <- generate_random_T(K_counts)    # near-diagonal random matrix
prior_alpha      <- 3                              # single shape prior (fairly vague)
# pick K quantiles of the observed counts as prior means,
# then convert means to (descending) rate parameters  beta = alpha / mean
mean_q           <- as.numeric(quantile(counts_raw,
probs = seq(0.2, 0.8, length.out = K_counts)))
prior_alpha      <- 3                              # single shape prior (fairly vague)
# pick K quantiles of the observed counts as prior means,
# then convert means to (descending) rate parameters  beta = alpha / mean
mean_q           <- as.numeric(quantile(counts_raw,
probs = seq(0.2, 0.8, length.out = K_counts)))
prior_betas      <- prior_alpha / sort(mean_q, decreasing = TRUE)
### 2b. Priors for the **normal** model  (GC)
prior_T_gc       <- generate_random_T(K_gc)
prior_means      <- as.numeric(quantile(gc_prop,
probs = seq(0.2, 0.8, length.out = K_gc)))
prior_sd         <- sd(gc_prop)                    # single shared σ prior
## ---------------------------------------------------------------------------
## 3.  RUN oHMMed
## ---------------------------------------------------------------------------
set.seed(42)
set.seed(43)
fit_gc <- hmm_mcmc_normal(
data         = gc_prop,
prior_T      = prior_T_gc,
prior_means  = prior_means,
prior_sd     = prior_sd,
iter         = 80,
warmup       = 20,
thin         = 10,
print_params = FALSE,
verbose      = TRUE
)
plot(fit_gc)
ggmcmc::ggs_traceplot(convert_to_ggmcmc(fit_gc,  pattern = "mean"))
## ---------- Arabidopsis GC (normal) ---------------------------------------
state_gc <- fit_gc$estimates$posterior_states
post_gc  <- fit_gc$estimates$posterior_states_prob
gc_df$state <- state_gc
write.table(
gc_df[, c("seqnames", "start", "end", "GC_prop", "state")],
file      = "data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB_oHMMed_K3.bed",
sep       = "\t", quote = FALSE, row.names = FALSE
)
View(gc_df)
params_gc <- fit_gc$estimates$params
fit_gc
estimates
fit_gc$estimates$
fit_gc$estimates
params_gc <- fit_gc$estimates$$log_likelihood
params_gc <- fit_gc$estimates$log_likelihood
params_gc <- fit_gc$estimates$$means
mean_gc <- fit_gc$estimates$means
mean_log_likelihood <- fit_gc$log_likelihood
mean_log_likelihood
mean_log_likelihood <- mean(fit_gc$estimates$log_likelihood)
mean_log_likelihood
