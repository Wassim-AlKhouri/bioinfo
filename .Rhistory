geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (solid) and Median (dashed) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
ggplot(loglik_gc_summary, aes(x = K)) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (solid) and Median (dashed) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (solid) and Median (dashed) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
states <- 2:10
fits <- lapply(states, function(k) {
set.seed(123)
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (solid) and Median (dashed) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
entropy  = sapply(fits, function(f) f$estimates$segmentation_entropy)
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
entropy  = sapply(fits, function(f) f$estimates$segmentation_entropy)
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
entropy  = sapply(fits, function(f) f$estimates$segmentation_entropy)
)
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
entropy  = sapply(fits, function(f) f$estimates$segmentation_entropy)
)
entropy  = sapply(fits, function(f) f$estimates$segmentation_entropy)
View(entropy)
entropy[[1]]
fits
View(fits)
fits[[1]][["estimates"]][["log_likelihood"]]
plot(fits[[1]])
# 1. a simple for‐loop, adding titles if you like
for (i in seq_along(fits)) {
plot(fits[[i]], main = paste0("oHMMed diagnostics — K = ", states[i]))
}
plot(fits[[1]])
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
sum(is.na(gc_prop))
sum(!is.finite(gc_prop))
T9 <- generate_random_T(9)
View(T9)
any(is.na(T9))
any(!is.finite(T9))
T9 <- generate_random_T(1)
T9 <- generate_random_T(2)
any(!is.finite(T9))
states <- 2:8
fits <- lapply(states, function(k) {
set.seed(123)
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
generate_random_T(7)
generate_random_T(8)
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = 7)
)
)
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = 8)))
# 1) Inspect the T matrix
T7 <- generate_random_T(7)
print("T7:")
print(T7)
cat("any NA? ", any(is.na(T7)),    "\n")
cat("any infinite? ", any(!is.finite(T7)), "\n")
cat("row sums:", rowSums(T7),      "\n\n")
# 2) Inspect your prior means
m7 <- as.numeric(quantile(gc_prop, probs = seq(0.2, 0.8, length.out = 7)))
print("m7:")
print(m7)
cat("any NA? ", any(is.na(m7)),    "\n")
cat("any infinite? ", any(!is.finite(m7)), "\n")
states <- 2:8
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1000, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:8
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
View(loglik_gc_summary)
states <- 2:6
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
)
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
gc_prop <- gc_df$GC_prop
prior_sd         <- sd(gc_prop)                    # single shared σ prior
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
)
states
fits
states
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = seq(min(gc_prop), max(gc_prop), length.out = k),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = seq(min(gc_prop), max(gc_prop), length.out = k),
prior_sd = prior_sd,
iter = 1500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
max(gc_prop)
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k)))
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = 3)))
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = 7)))
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 200, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 100, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 150, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 125, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (blue) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "mean/ median Log-likelihood"
) +
theme_bw()
plot(fits[[1]])
plot(fits[[9]])
plot(fits[[8]])
plot(fits[[0]])
plot(fits[[1]])
View(fits)
plot(fits[[4]])
plot(fits[[5]])
plot(fits[[7]])
plot(fits[[6]])
plot(fits[[1]])
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "mean/ median Log-likelihood"
) +
theme_bw()
View(fits)
View(loglik_gc_summary)
View(loglik_gc_summary)
loglik_gc_summary
plot(fits[[4]])
plot(fits[[3]])
if (!requireNamespace("oHMMed", quietly = TRUE)) {
install.packages("oHMMed")              # CRAN 2024-04-19
}
library(oHMMed)
library(ggmcmc)                           # plotting helpers
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
gc_prop <- gc_df$GC_prop
### 2b. Priors for the **normal** model  (GC)
prior_T_gc       <- generate_random_T(K_gc)
prior_means      <- as.numeric(quantile(gc_prop,
probs = seq(0.2, 0.8, length.out = K_gc)))
prior_sd         <- sd(gc_prop)                    # single shared σ prior
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 125, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1000, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1000, warmup = 200, thin = 10,
print_params = FALSE, verbose = FALSE)
})
