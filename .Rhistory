geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
View(loglik_gc_summary)
states <- 2:6
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
)
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
gc_prop <- gc_df$GC_prop
prior_sd         <- sd(gc_prop)                    # single shared σ prior
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood)),
)
states
fits
states
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = seq(min(gc_prop), max(gc_prop), length.out = k),
prior_sd = prior_sd,
iter = 80, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:6
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = seq(min(gc_prop), max(gc_prop), length.out = k),
prior_sd = prior_sd,
iter = 1500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
max(gc_prop)
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k)))
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = 3)))
as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = 7)))
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 500, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 200, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 100, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 150, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 125, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
loglik_gc_summary <- data.frame(
K        = states,
MeanLL   = sapply(fits, function(f) mean(f$estimates$log_likelihood)),
MedianLL = sapply(fits, function(f) median(f$estimates$log_likelihood))
)
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (bleu) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "Log-likelihood",
title = "Mean (blue) and Median (orange) log-likelihood vs. K\n(Arabidopsis GC, normal emissions)"
) +
theme_bw()
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "mean/ median Log-likelihood"
) +
theme_bw()
plot(fits[[1]])
plot(fits[[9]])
plot(fits[[8]])
plot(fits[[0]])
plot(fits[[1]])
View(fits)
plot(fits[[4]])
plot(fits[[5]])
plot(fits[[7]])
plot(fits[[6]])
plot(fits[[1]])
ggplot(loglik_gc_summary, aes(x = K)) +
geom_line(aes(y = MeanLL),    color = "steelblue", size = 1) +
geom_point(aes(y = MeanLL),   color = "steelblue", size = 2) +
geom_line(aes(y = MedianLL),  linetype = "dashed", color = "darkorange", size = 1) +
geom_point(aes(y = MedianLL), color = "darkorange", size = 2) +
scale_x_continuous(breaks = states) +
labs(
x     = "Number of hidden states (K)",
y     = "mean/ median Log-likelihood"
) +
theme_bw()
View(fits)
View(loglik_gc_summary)
View(loglik_gc_summary)
loglik_gc_summary
plot(fits[[4]])
plot(fits[[3]])
if (!requireNamespace("oHMMed", quietly = TRUE)) {
install.packages("oHMMed")              # CRAN 2024-04-19
}
library(oHMMed)
library(ggmcmc)                           # plotting helpers
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
gc_prop <- gc_df$GC_prop
### 2b. Priors for the **normal** model  (GC)
prior_T_gc       <- generate_random_T(K_gc)
prior_means      <- as.numeric(quantile(gc_prop,
probs = seq(0.2, 0.8, length.out = K_gc)))
prior_sd         <- sd(gc_prop)                    # single shared σ prior
#6.b sweep over k and plot mean LOG-LIKELIHOOD
# Arabidopsis
library(ggplot2)
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 125, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1000, warmup = 20, thin = 10,
print_params = FALSE, verbose = FALSE)
})
states <- 2:9
fits <- lapply(states, function(k) {
set.seed(123)
print(paste0("calculation for ",k," number of states"))
hmm_mcmc_normal(gc_prop,
prior_T = generate_random_T(k),
prior_means = as.numeric(
quantile(gc_prop,probs = seq(0.2, 0.8,length.out = k))),
prior_sd = prior_sd,
iter = 1000, warmup = 200, thin = 10,
print_params = FALSE, verbose = FALSE)
})
## ────────────────────────────────────────────────────────────────────────────
## 0.  PACKAGES
## ────────────────────────────────────────────────────────────────────────────
req_pkgs <- c("oHMMed", "dplyr", "tidyr", "ggplot2", "ggmcmc")
for (pkg in req_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
}
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
counts_raw <- as.integer(snv_df$snv_count)
counts_raw <- pmax(counts_raw, 1L)               # avoid log(0) = –Inf
View(snv_df)
counts_raw
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:9
fits_counts   <- vector("list", length(states_counts))
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
# --- gamma–Poisson priors (SNV counts) --------------------------------------
prior_alpha      <- 3
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:9
fits_counts   <- vector("list", length(states_counts))
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
## ────────────────────────────────────────────────────────────────────────────
## 2.  HELPER: SAFE RANDOM TRANSITION MATRIX
## ────────────────────────────────────────────────────────────────────────────
generate_random_T <- function(k, self = 0.85) {
stopifnot(k >= 2, self > 0, self < 1)
T <- matrix(0, k, k)
remain <- 1 - self
for (i in 1:k) {
T[i, i] <- self
if (i > 1)  T[i, i - 1] <- remain * ifelse(i == k, 1, 0.5)
if (i < k)  T[i, i + 1] <- remain * ifelse(i == 1, 1, 0.5)
}
# (optional) sanity check – every row must be 1
if (any(abs(rowSums(T) - 1) > 1e-12))
stop("Internal error: row sums are not 1")
T
}
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:9
fits_counts   <- vector("list", length(states_counts))
fits_counts
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
##############################################################################
# 5.  DIAGNOSTICS  +  SAVE EVERY FIGURE
##############################################################################
output_dir <- "data/treated data/plots"          # <- where images will go
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:9
fits_counts   <- vector("list", length(states_counts))
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
# --- log-likelihood summary figure for SNV counts ----------------------------
loglik_counts_summary <- data.frame(
K        = states_counts,
MeanLL   = vapply(fits_counts,
function(f) mean(f$estimates$log_likelihood),
numeric(1)),
MedianLL = vapply(fits_counts,
function(f) median(f$estimates$log_likelihood),
numeric(1))
)
library(ggplot2)
p_ll_counts <- ggplot(loglik_counts_summary, aes(x = K)) +
geom_line(aes(y = MeanLL,   color = "Mean"),    linewidth = 1) +
geom_point(aes(y = MeanLL,   color = "Mean"),   size = 2) +
geom_line(aes(y = MedianLL, color = "Median"),
linetype = "dashed", linewidth = 1) +
geom_point(aes(y = MedianLL, color = "Median"), size = 2) +
scale_x_continuous(breaks = states_counts) +
scale_color_manual(values = c(Mean = "steelblue",
Median = "darkorange")) +
labs(
title = "Breast-cancer SNV counts: mean / median log-likelihood vs. K",
x     = "Number of hidden states (K)",
y     = "Log-likelihood"
) +
theme_bw()
ggsave(filename = file.path(output_dir, "counts_loglik_vs_K.png"),
plot    = p_ll_counts,
width   = 9,
height  = 6,
dpi     = 150)
