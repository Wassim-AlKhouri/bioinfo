head(unique_ids)
# to get one sample
sample_id <- "TCGA-BH-A201-01A-11D-A14K-09"
sample_maf <- subsetMaf(
maf       = maf,
tsb       = sample_id,       # tumor‐sample barcode
mafObj    = TRUE             # return a maf object
)
snvs <- data.frame(
chr = maf@data$Chromosome,
pos = maf@data$Start_Position
)
# 4. Create 100 kb tiling of the autosomes
#    adjust seqlevelsStyle to match your assembly (“chr1” vs “1”)
bins <- tileGenome(
seqlengths = seqlengths(BSgenome.Hsapiens.UCSC.hg38)[paste0("chr",1:22)],  # to get only the autosomes
tilewidth  = 100e3,
cut.last.tile.in.chrom = TRUE # drop if samaler than 100 kb at the end of each chromo
)
seqs   <- getSeq(BSgenome.Hsapiens.UCSC.hg38, bins)
n_counts <- letterFrequency(seqs, letters="N", or="aligned")
seqs
n_counts <- letterFrequency(seqs, letters="N")
n_counts
bin_widths <- width(bins)
bin_widths
n_counts
nonN_bases
nonN_bases <- bin_widths - n_counts
nonN_bases
dim(nonN_bases)
dim(bins)
dim(bin_widths)
bin_widths
dim(nonN_bases)
good_bins <- bins[nonN_bases > 90e3]
dim(good_bins
)
good_bins
View(good_bins)
bins
nonN_bases > 90e3
sum(nonN_bases > 90e3 == FALSE )
sum((nonN_bases > 90e3 )== FALSE )
# 5. Turn your SNV list into a GRanges
snv_gr <- GRanges(
seqnames = snvs$chr,
ranges   = IRanges(start=snvs$pos, end = snvs$pos)
)
# 6. Count SNVs per 100 kb bin
counts_vec <- countOverlaps(good_bins, snv_gr)
# 7. Inspect the distribution
hist(log(counts_vec), breaks=30, main="SNVs per 100 kb window", xlab="Count")
df2 <- data.frame(
seqnames   = as.character(seqnames(good_bins)),
start      = start(good_bins),
end        = end(good_bins),
snv_count  = counts_vec
)
View(df2)
dim(good_bins)
dim(bin_widths)
dim(nonN_bases)
View(df2)
dim(df2)
write.table(
df2,
file      =paste0("/Volumes/T7 Shield/oHMMed /DATA/BREAST/snv_counts_100kb_windows_",sample_id,".tsv"),
sep       = "\t",
quote     = FALSE,
row.names = FALSE,
col.names = TRUE
)
df <- read.table("~/Desktop/bioinf/M2/methods bionfo /GenomeAnnotations/MouseAnnotation.txt",
header = TRUE,
sep="")
gc <- df$GC_PROPORTION
gc <- na.omit(gc)
var(gc)
d_gc  <- diff(gc)           # ΔGC = GC[i+1] − GC[i]
hist(gc,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (Arabidopsis) ",
xlab   = "log SNV count")
?shapiro.test
shapiro.test(gc)
gc
shapiro.test(gc)
dim(gc)
length(gc)
gc.sub <- sample(gc, 5000)
shapiro.test(gc.sub)
set.seed(2)
gc.sub <- sample(gc, 5000)
shapiro.test(gc.sub)
hist(gc.sub,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (Arabidopsis) ",
xlab   = "log SNV count")
set.seed(2)
gc.sub <- sample(gc, 5000)
shapiro.test(gc.sub)
hist(gc,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (mouse) ",
xlab   = "SNV count")
hist(gc,
breaks = 100,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count (mouse) ",
xlab   = "GC count")
shapiro.test(gc.sub)
data <- read.table('data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
sep = "\t",header = TRUE )
counts <- data$snv_count
counts_log <- log1p(counts)
hist(counts_log,
breaks = 20,               # number of bins; adjust to taste
freq   = FALSE,           # density rather than counts
col    = "lightgray",
main   = "Distribution of SNV-count ",
xlab   = "log SNV count")
data <- read.table('data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
sep = "\t",header = TRUE )
## ────────────────────────────────────────────────────────────────────────────
## 0.  PACKAGES
## ────────────────────────────────────────────────────────────────────────────
req_pkgs <- c("oHMMed", "dplyr", "tidyr", "ggplot2", "ggmcmc")
for (pkg in req_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
}
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
counts_raw <- as.integer(snv_df$snv_count)
counts_raw <- pmax(counts_raw, 1L)               # avoid log(0) = –Inf
## ────────────────────────────────────────────────────────────────────────────
## 2.  HELPER: SAFE RANDOM TRANSITION MATRIX
## ────────────────────────────────────────────────────────────────────────────
generate_random_T <- function(k, self = 0.85) {
stopifnot(k >= 2, self > 0, self < 1)
T <- matrix(0, k, k)
remain <- 1 - self
for (i in 1:k) {
T[i, i] <- self
if (i > 1)  T[i, i - 1] <- remain * ifelse(i == k, 1, 0.5)
if (i < k)  T[i, i + 1] <- remain * ifelse(i == 1, 1, 0.5)
}
# (optional) sanity check – every row must be 1
if (any(abs(rowSums(T) - 1) > 1e-12))
stop("Internal error: row sums are not 1")
T
}
# --- gamma–Poisson priors (SNV counts) --------------------------------------
prior_alpha      <- 3
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:12
fits_counts   <- vector("list", length(states_counts))
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
# ---- (ii) Arabidopsis GC proportion ────────────────────────────────────────
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
## ────────────────────────────────────────────────────────────────────────────
## 0.  PACKAGES
## ────────────────────────────────────────────────────────────────────────────
req_pkgs <- c("oHMMed", "dplyr", "tidyr", "ggplot2", "ggmcmc")
for (pkg in req_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
}
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
'data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv',
header = TRUE, sep = "\t"
)
getwd()
setwd('/Users/godinmax/Desktop/bioinf/M2/methods bionfo /MAX_WAS/bioinfo')
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
counts_raw <- as.integer(snv_df$snv_count)
counts_raw <- pmax(counts_raw, 1L)               # avoid log(0) = –Inf
## ────────────────────────────────────────────────────────────────────────────
## 2.  HELPER: SAFE RANDOM TRANSITION MATRIX
## ────────────────────────────────────────────────────────────────────────────
generate_random_T <- function(k, self = 0.85) {
stopifnot(k >= 2, self > 0, self < 1)
T <- matrix(0, k, k)
remain <- 1 - self
for (i in 1:k) {
T[i, i] <- self
if (i > 1)  T[i, i - 1] <- remain * ifelse(i == k, 1, 0.5)
if (i < k)  T[i, i + 1] <- remain * ifelse(i == 1, 1, 0.5)
}
# (optional) sanity check – every row must be 1
if (any(abs(rowSums(T) - 1) > 1e-12))
stop("Internal error: row sums are not 1")
T
}
# --- gamma–Poisson priors (SNV counts) --------------------------------------
prior_alpha      <- 3
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:12
fits_counts   <- vector("list", length(states_counts))
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
##############################################################################
# 5.  DIAGNOSTICS  +  SAVE EVERY FIGURE
##############################################################################
output_dir <- "data/treated data/plots"          # <- where images will go
##############################################################################
# 7b.  SWEEP OVER K  FOR SNV COUNTS   +   SAVE EVERY EXTRA PLOT
##############################################################################
states_counts <- 2:12
fits_counts   <- vector("list", length(states_counts))
for (i in seq_along(states_counts)) {
k <- states_counts[i]
message("◆ Fitting SNV counts, K = ", k)
set.seed(100 + k)
# rebuild priors for this k
mean_q_k        <- quantile(counts_raw,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)
prior_betas_k   <- prior_alpha / sort(pmax(mean_q_k, 10), decreasing = TRUE)
prior_T_counts_k <- generate_random_T(k, self = 0.85)
# fit the gamma–Poisson HMM
fits_counts[[i]] <- hmm_mcmc_gamma_poisson(
data         = counts_raw,
prior_T      = prior_T_counts_k,
prior_betas  = prior_betas_k,
prior_alpha  = prior_alpha,
iter         = 800,
warmup       = 160,
thin         = 10,
print_params = FALSE,
verbose      = FALSE
)
# save diagnostic plot
png(file.path(output_dir,
sprintf("diagnostics_counts_K%02d.png", k)),
width = 1600, height = 1200, res = 150)
plot(fits_counts[[i]],
main = sprintf("oHMMed diagnostics — SNV counts, K = %d", k))
dev.off()
}
View(snv_df)
# --- log-likelihood summary figure for SNV counts ----------------------------
loglik_counts_summary <- data.frame(
K        = states_counts,
MeanLL   = vapply(fits_counts,
function(f) mean(f$estimates$log_likelihood),
numeric(1)),
MedianLL = vapply(fits_counts,
function(f) median(f$estimates$log_likelihood),
numeric(1))
)
library(ggplot2)
p_ll_counts <- ggplot(loglik_counts_summary, aes(x = K)) +
geom_line(aes(y = MeanLL,   color = "Mean"),    linewidth = 1) +
geom_point(aes(y = MeanLL,   color = "Mean"),   size = 2) +
geom_line(aes(y = MedianLL, color = "Median"),
linetype = "dashed", linewidth = 1) +
geom_point(aes(y = MedianLL, color = "Median"), size = 2) +
scale_x_continuous(breaks = states_counts) +
scale_color_manual(values = c(Mean = "steelblue",
Median = "darkorange")) +
labs(
title = "Breast-cancer SNV counts: mean / median log-likelihood vs. K",
x     = "Number of hidden states (K)",
y     = "Log-likelihood"
) +
theme_bw()
ggsave(filename = file.path(output_dir, "counts_loglik_vs_K.png"),
plot    = p_ll_counts,
width   = 9,
height  = 6,
dpi     = 150)
# ---- (ii) Arabidopsis GC proportion ────────────────────────────────────────
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
View(gc_df)
## ────────────────────────────────────────────────────────────────────────────
## 1.  DATA
## ────────────────────────────────────────────────────────────────────────────
# ---- (i) SNV counts ────────────────────────────────────────────────────────
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
View(snv_df)
View(snv_df)
?as.data
?as.data.frame
snv_df <- read.table(
"data/treated data/breast_cancer/snv_counts_100kb_windows_TCGA-BH-A201-01A-11D-A14K-09.tsv",
header = TRUE, sep = "\t"
)
counts_raw <- as.integer(snv_df$snv_count)
counts_raw <- pmax(counts_raw, 1L)
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
if ("chr" %in% names(gc_df)) names(gc_df)[names(gc_df) == "chr"] <- "seqnames"
gc_prop <- gc_df$GC_prop
generate_random_T <- function(k, self = 0.85) {
stopifnot(k >= 2, self > 0, self < 1)
T <- matrix(0, k, k)
remain <- 1 - self
for (i in 1:k) {
T[i, i] <- self
if (i > 1)  T[i, i - 1] <- remain * ifelse(i == k, 1, 0.5)
if (i < k)  T[i, i + 1] <- remain * ifelse(i == 1, 1, 0.5)
}
# (optional) sanity check – every row must be 1
if (any(abs(rowSums(T) - 1) > 1e-12))
stop("Internal error: row sums are not 1")
T
}
prior_sd         <- sd(gc_prop)
prior_sd         <- sd(gc_prop)
k <- 5
message("◆ Fitting K = ", k)
set.seed(100 + k)
fits_gc <- hmm_mcmc_normal(
data         = gc_prop,
prior_T      = generate_random_T(k, self = 0.85),
prior_means  = sort(quantile(gc_prop,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)),
prior_sd     = prior_sd,
iter         = 8000, warmup = 2000, thin = 10,
print_params = FALSE, verbose = FALSE
)
for (pkg in req_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
}
req_pkgs <- c("oHMMed", "dplyr", "tidyr", "ggplot2", "ggmcmc")
for (pkg in req_pkgs) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
}
gc_df <- read.table(
"data/treated data/Arabidopsis/TAIR10_chr1-5_GC_100KB.tsv",
header = TRUE, sep = "\t"
)
if ("chr" %in% names(gc_df)) names(gc_df)[names(gc_df) == "chr"] <- "seqnames"
gc_prop <- gc_df$GC_prop
generate_random_T <- function(k, self = 0.85) {
stopifnot(k >= 2, self > 0, self < 1)
T <- matrix(0, k, k)
remain <- 1 - self
for (i in 1:k) {
T[i, i] <- self
if (i > 1)  T[i, i - 1] <- remain * ifelse(i == k, 1, 0.5)
if (i < k)  T[i, i + 1] <- remain * ifelse(i == 1, 1, 0.5)
}
# (optional) sanity check – every row must be 1
if (any(abs(rowSums(T) - 1) > 1e-12))
stop("Internal error: row sums are not 1")
T
}
prior_sd         <- sd(gc_prop)
k <- 5
message("◆ Fitting K = ", k)
set.seed(100 + k)
fits_gc <- hmm_mcmc_normal(
data         = gc_prop,
prior_T      = generate_random_T(k, self = 0.85),
prior_means  = sort(quantile(gc_prop,
probs = seq(0.1, 0.9, length.out = k),
names = FALSE)),
prior_sd     = prior_sd,
iter         = 8000, warmup = 2000, thin = 10,
print_params = FALSE, verbose = FALSE
)
mu_draws <- fits_gc$estimates$mean
mu_draws
## get sd
fits_gc[["estimates"]][["sd"]]
win_state <- fits_gc$estimates$posterior_states     # length = n_windows
## counts and proportions
tbl_windows <- table(win_state)                    # counts per state
prop_windows <- prop.table(tbl_windows)            # proportions (0‒1)
## 3. make it neat
prop_df <- data.frame(
state      = as.integer(names(tbl_windows)),
n_windows  = as.integer(tbl_windows),
proportion = as.numeric(prop_windows)
)
prop_df
View(prop_df)
gc_df$state <- fit_k5$estimates$posterior_states
View(gc_df)
View(prop_df)
View(fits_gc)
View(gc_df)
#### Genome-wide track
gc_df$state <- fit_k5$estimates$posterior_states
gc_df$state <- fits_gc$estimates$posterior_states
View(gc_df)
